# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com
project_name: dagger-go-example-app
# setups builds for linux on amd64
# https://goreleaser.com/customization/build
before:
  hooks:
    - go mod tidy
builds:
  - env:
      - CGO_ENABLED=0
    goos:
      - linux
      - darwin
    goarch:
      - "amd64"
      - "arm64"
    goamd64:
    - ""
    ldflags:
    - '-s -w -X main.version={{.Version}} -X main.commit={{.Commit}}'
    ignore:
      - goos: linux
        goarch: 'arm64'
    binary: '{{ .ProjectName }}-v{{ .Version }}_{{ .Os }}_{{ .Arch }}'
    no_unique_dist_dir: true

archives:
  - format: binary

# creates SBOMs of all binaries using syft
# https://goreleaser.com/customization/sbom
sboms:
  - artifacts: binary

# create release draft with the current tag, uploads artifacts and generates a changelog
# https://goreleaser.com/customization/release/
release:
  # If you want to manually examine the release before its live, uncomment this line:
  draft: true

# config the checksum filename
# https://goreleaser.com/customization/checksum
checksum:
  name_template: 'checksums.txt'

changelog:
  use: github  
  filters:
    # Commit messages matching the regexp listed here will be removed from
    # the changelog
    exclude:
      - 'docs:'
      - 'ci:'
      - 'test:'

    groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: 'Bug fixes'
      regexp: '^.*?bug(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: Others
      order: 999

# config the snapshot name template when using the --snapshot flag
# https://goreleaser.com/customization/snapshots/
snapshot:
  name_template: "{{ incpatch .Version }}-snapshot"
